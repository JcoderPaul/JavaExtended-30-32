******* Метод запись в файл *******

******* Принимает на запись байты *******

Синтаксис: write public static Path write(Path, byte[] bytes, OpenOption) throws IOException
Пример применения:
--------------------------------------------------------------------------------------------
Path path = ...
byte[] bytes = ...
Files.write(path, bytes, StandardOpenOption.APPEND);
--------------------------------------------------------------------------------------------
Где принимаемые параметры:
- path - путь к файлу
- bytes- массив байтов с байтами для записи;
- options- параметры, определяющие способ открытия файла.
Метод возвращает: Path
Возможные исключения:
- IOException - если возникает ошибка ввода-вывода при записи или создании файла;
- UnsupportedOperationException - если указан неподдерживаемый вариант;
- SecurityException - в случае провайдера по умолчанию и установленного менеджера
                      безопасности checkWrite метод вызывается для проверки доступа
                      на запись к файлу.

Записывает байты в файл. Параметр options указывает, как файл создается или открывается.
Если параметры отсутствуют, этот метод работает так, как если бы присутствовали параметры:
CREATE, TRUNCATE_EXISTING или WRITE. Другими словами, он открывает файл для записи, создает
файл, если он не существует, или первоначально усекает существующий regular-file до размера 0.

Все байты массива байтов записываются в файл. Этот метод гарантирует, что файл будет закрыт,
когда все байты будут записаны (или возникнет ошибка ввода-вывода или другое исключение времени
выполнения).

Если возникает ошибка ввода-вывода, это может произойти после того, как файл был создан или
усечен, или после того, как в файл было записано несколько байтов.

******* Запись строк текста в файл *******

Синтаксис: public static Path write(Path path,
                                    Iterable<? extends CharSequence> lines,
                                    Charset cs,
                                    OpenOption) throws IOException

           public static Path write(Path path,
                                    Iterable<? extends CharSequence> lines,
                                    OpenOption... options) throws IOException
Где входные параметры:
- path - путь к файлу;
- lines - объект для перебора последовательностей символов;
- cs - кодировка, используемая для кодирования;
  (во втором случае, по умолчанию, символы кодируются в байты с помощью расширения - UTF-8 charset,
   как если бы мы применили: Files.write(path, lines, StandardCharsets.UTF_8, options);)
- options - параметры, определяющие способ открытия файла.
Возвращает: Path
Возможные исключения:
- IOException - если возникает ошибка ввода-вывода при записи или создании файла,
                или текст не может быть закодирован с использованием указанной
                кодировки;
- UnsupportedOperationException - если указан неподдерживаемый вариант;
- SecurityException - в случае провайдера по умолчанию и установленного менеджера
                      безопасности checkWrite метод вызывается для проверки доступа
                      на запись к файлу.

Запись строк текста в файл. Каждая строка представляет собой последовательность символов
и записывается в файл последовательно, причем каждая строка завершается разделителем
строк платформы, как определено системным свойством line.separator.

Символы кодируются в байты с использованием указанного набора символов. Параметр options
указывает, как файл создается или открывается. Если параметры отсутствуют, то метод работает
так, как если бы присутствовали параметры CREATE, TRUNCATE_EXISTING или WRITE.
Т.е. он открывает файл для записи, создает файл, если он не существует, или первоначально
усекает существующий regular-file до размера 0.

Метод гарантирует, что файл будет закрыт, когда все строки будут записаны (или возникнет
ошибка ввода-вывода или другое исключение времени выполнения). Если возникает ошибка
ввода-вывода, это может произойти после того, как файл был создан или усечен, или после того,
как в файл было записано несколько байтов.